{"version":3,"file":"actions.js","sourceRoot":"","sources":["../../deploy/actions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAOA,yBAgFC;AAvFD,yDAAmF;AAEnF,gDAAwB;AAKxB,SAA8B,MAAM,CAClC,MAMC,EACD,OAAuB,EACvB,WAAwB,EACxB,OAAe;;QAGf,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;YACpB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC3C,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;gBACpB,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;YACrD,CAAC;YAED,MAAM,SAAS,qBACV,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CACxD,CAAC;YAEF,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,OAAO,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;YAC/D,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC;YAE7D,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,cAAc,CACxC,IAAA,kCAAsB,EAAC,WAAW,CAAC,IAAI,CAAC,kCAEnC,WAAW,CAAC,OAAO,GACnB,SAAS,EAEf,CAAC;YACF,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,MAAM,CAAC;YAEvC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;gBACzB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;YACnD,CAAC;QACH,CAAC;QAID,IAAI,GAAW,CAAC;QAChB,IAAI,OAAO,CAAC,GAAG,EAAE,CAAC;YAEhB,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;QAEpB,CAAC;aAAM,CAAC;YAEN,MAAM,YAAY,GAAG,MAAM,OAAO,CAAC,gBAAgB,CACjD,IAAA,kCAAsB,EAAC,WAAW,CAAC,IAAI,CAAC,CACzC,CAAC;YASF,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC;gBAC7B,MAAM,IAAI,KAAK,CACb,6DAA6D,WAAW,CAAC,IAAI,oBAAoB,CAClG,CAAC;YACJ,CAAC;YAED,IAAI,OAAO,YAAY,CAAC,UAAU,KAAK,QAAQ,EAAE,CAAC;gBAChD,GAAG,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;YACtD,CAAC;iBAAM,CAAC;gBACN,MAAM,GAAG,GAAG,YAAY,CAAC,UAAiB,CAAC;gBAC3C,GAAG,GAAG,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,CAAA;YACxC,CAAC;QACH,CAAC;QAED,MAAM,MAAM,CAAC,GAAG,CACd,GAAG,EACH,OAAO,EACN,OAAO,CAAC,MAAuC,CACjD,CAAC;IACJ,CAAC;CAAA","sourcesContent":["import { BuilderContext, targetFromTargetString } from '@angular-devkit/architect';\r\nimport { logging } from '@angular-devkit/core';\r\nimport path from 'path';\r\n\r\nimport { BuildTarget } from '../interfaces';\r\nimport { Schema } from './schema';\r\n\r\nexport default async function deploy(\r\n  engine: {\r\n    run: (\r\n      dir: string,\r\n      options: Schema,\r\n      logger: logging.LoggerApi\r\n    ) => Promise<void>;\r\n  },\r\n  context: BuilderContext,\r\n  buildTarget: BuildTarget,\r\n  options: Schema\r\n) {\r\n  // 1. BUILD\r\n  if (options.noBuild) {\r\n    context.logger.info(`ðŸ“¦ Skipping build`);\r\n  } else {\r\n    if (!context.target) {\r\n      throw new Error('Cannot execute the build target');\r\n    }\r\n\r\n    const overrides = {\r\n      ...(options.baseHref && { baseHref: options.baseHref })\r\n    };\r\n\r\n    context.logger.info(`ðŸ“¦ Building \"${context.target.project}\"`);\r\n    context.logger.info(`ðŸ“¦ Build target \"${buildTarget.name}\"`);\r\n\r\n    const build = await context.scheduleTarget(\r\n      targetFromTargetString(buildTarget.name),\r\n      {\r\n        ...buildTarget.options,\r\n        ...overrides\r\n      }\r\n    );\r\n    const buildResult = await build.result;\r\n\r\n    if (!buildResult.success) {\r\n      throw new Error('Error while building the app.');\r\n    }\r\n  }\r\n\r\n  // 2. DEPLOYMENT\r\n\r\n  let dir: string;\r\n  if (options.dir) {\r\n\r\n    dir = options.dir;\r\n\r\n  } else {\r\n\r\n    const buildOptions = await context.getTargetOptions(\r\n      targetFromTargetString(buildTarget.name)\r\n    );\r\n\r\n    // Output path configuration\r\n    // The outputPath option can be either\r\n    // - a String which will be used as the base value + default value 'browser'\r\n    // - or an Object for more fine-tune configuration.\r\n    // see https://angular.io/guide/workspace-config#output-path-configuration\r\n    // see https://github.com/angular/angular-cli/pull/26675\r\n\r\n    if (!buildOptions.outputPath) {\r\n      throw new Error(\r\n        `Cannot read the outputPath option of the Angular project '${buildTarget.name}' in angular.json.`\r\n      );\r\n    }\r\n\r\n    if (typeof buildOptions.outputPath === 'string') {\r\n      dir = path.join(buildOptions.outputPath, 'browser');\r\n    } else {\r\n      const obj = buildOptions.outputPath as any;\r\n      dir = path.join(obj.base, obj.browser)\r\n    }\r\n  }\r\n\r\n  await engine.run(\r\n    dir,\r\n    options,\r\n    (context.logger as unknown) as logging.LoggerApi\r\n  );\r\n}\r\n"]}