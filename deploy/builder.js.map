{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../deploy/builder.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yDAImC;AAEnC,yDAA2C;AAC3C,wDAA+B;AAS/B,kBAAe,IAAA,yBAAa,EAC1B,CAAO,OAAe,EAAE,OAAuB,EAA0B,EAAE;IACzE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QACpB,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;IACpE,CAAC;IAED,MAAM,iBAAiB,GAAG;QACxB,IAAI,EACF,OAAO,CAAC,aAAa;YACrB,OAAO,CAAC,WAAW;YACnB,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,mBAAmB;KAC/C,CAAC;IAEF,IAAI,oBAA6C,CAAC;IAClD,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;QACtB,oBAAoB,GAAG;YACrB,IAAI,EACF,OAAO,CAAC,eAAe;gBACvB,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,uBAAuB;SACnD,CAAC;IACJ,CAAC;IAUD,MAAM,gBAAgB,GAAG,oBAAoB;QAC3C,CAAC,CAAC,oBAAoB;QACtB,CAAC,CAAC,iBAAiB,CAAC;IAEtB,IAAI,CAAC;QACH,MAAM,IAAA,iBAAM,EAAC,MAAM,EAAE,OAAO,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IAAC,OAAO,CAAC,EAAE,CAAC;QACX,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;QACnE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAChC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;IAC5B,CAAC;IAED,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC,CAAA,CACF,CAAC","sourcesContent":["import {\r\n  BuilderContext,\r\n  BuilderOutput,\r\n  createBuilder\r\n} from '@angular-devkit/architect';\r\n\r\nimport * as engine from '../engine/engine';\r\nimport deploy from './actions';\r\nimport { Schema } from './schema';\r\nimport { BuildTarget } from '../interfaces';\r\n\r\n// Call the createBuilder() function to create a builder. This mirrors\r\n// createJobHandler() but add typings specific to Architect Builders.\r\n//\r\n// if something breaks here, see how angularfire has fixed it:\r\n// https://github.com/angular/angularfire/blob/master/src/schematics/deploy/builder.ts\r\nexport default createBuilder(\r\n  async (options: Schema, context: BuilderContext): Promise<BuilderOutput> => {\r\n    if (!context.target) {\r\n      throw new Error('Cannot deploy the application without a target');\r\n    }\r\n\r\n    const staticBuildTarget = {\r\n      name:\r\n        options.browserTarget ||\r\n        options.buildTarget ||\r\n        `${context.target.project}:build:production`\r\n    };\r\n\r\n    let prerenderBuildTarget: BuildTarget | undefined;\r\n    if (options.prerender) {\r\n      prerenderBuildTarget = {\r\n        name:\r\n          options.prerenderTarget ||\r\n          `${context.target.project}:prerender:production`\r\n      };\r\n    }\r\n\r\n    // serverBuildTarget is not supported and is completely ignored\r\n    // let serverBuildTarget: BuildTarget | undefined;\r\n    // if (options.ssr) {\r\n    //   serverBuildTarget = {\r\n    //     name: options.serverTarget || options.universalBuildTarget || `${context.target.project}:server:production`\r\n    //   };\r\n    // }\r\n\r\n    const finalBuildTarget = prerenderBuildTarget\r\n      ? prerenderBuildTarget\r\n      : staticBuildTarget;\r\n\r\n    try {\r\n      await deploy(engine, context, finalBuildTarget, options);\r\n    } catch (e) {\r\n      context.logger.error('‚ùå An error occurred when trying to deploy:');\r\n      context.logger.error(e.message);\r\n      return { success: false };\r\n    }\r\n\r\n    return { success: true };\r\n  }\r\n);\r\n"]}