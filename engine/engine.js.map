{"version":3,"file":"engine.js","sourceRoot":"","sources":["../../engine/engine.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,kBAiCC;AAED,wCA4IC;AAxLD,8CAAgC;AAChC,2CAA6B;AAI7B,yCAAoC;AAEpC,2DAAmC;AAEnC,SAAsB,GAAG,CACvB,GAAW,EACX,OAIC,EACD,MAAyB;;QAEzB,OAAO,GAAG,MAAM,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAGhD,MAAM,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;QAIpC,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,oDAAoD,CAAC,CAAC;QACpE,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,KAAK,EAAE,CAAC;QAClB,CAAC;QAED,MAAM,uBAAuB,CAAC,GAAG,CAAC,CAAC;QACnC,MAAM,kBAAkB,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAC/C,MAAM,eAAe,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAC5C,MAAM,kBAAkB,CAAC,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAC/C,MAAM,iBAAiB,CAAC,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QAEvD,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YACpB,MAAM,CAAC,IAAI,CACT,qEAAqE,CACtE,CAAC;QACJ,CAAC;IACH,CAAC;CAAA;AAED,SAAsB,cAAc,CAClC,WAAmB,EACnB,MAAyB;;QAMzB,MAAM,OAAO,mCAKR,mBAAQ,GACR,WAAW,CACf,CAAC;QAMF,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;QAC7B,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,EAAE;YACpB,IAAI,GAAG,KAAK,UAAU,EAAE,CAAC;gBACvB,OAAO;oBACL,IAAI,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;oBACjD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBACvB,CAAC,CAAC;YACJ,CAAC;YACD,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC,CAAC;QAMF,IAAI,WAAW,CAAC,UAAU,EAAE,CAAC;YAC3B,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC;QAC7C,CAAC;QACD,IAAI,WAAW,CAAC,UAAU,EAAE,CAAC;YAC3B,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC;QAC7C,CAAC;QACD,IAAI,WAAW,CAAC,UAAU,EAAE,CAAC;YAC3B,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC;QAC7C,CAAC;QAED,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;QACzD,CAAC;QAED,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;YAClC,OAAO,CAAC,MAAM,CAAC,GAAG;gBAChB,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,KAAK,EAAE,OAAO,CAAC,KAAK;aACrB,CAAC;QACJ,CAAC;QAED,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;YACvB,OAAO,CAAC,OAAO;gBACb,MAAM;oBACN,OAAO,CAAC,GAAG,CAAC,qBAAqB;oBACjC,OAAO;oBACP,0CAA0C;oBAC1C,OAAO,CAAC,GAAG,CAAC,gBAAgB;oBAC5B,UAAU;oBACV,OAAO,CAAC,GAAG,CAAC,aAAa;oBACzB,IAAI;oBACJ,yCAAyC;oBACzC,OAAO,CAAC,GAAG,CAAC,gBAAgB;oBAC5B,UAAU;oBACV,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;QAChC,CAAC;QAED,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;YACzB,OAAO,CAAC,OAAO;gBACb,MAAM;oBACN,0CAA0C;oBAC1C,OAAO,CAAC,GAAG,CAAC,uBAAuB;oBACnC,GAAG;oBACH,OAAO,CAAC,GAAG,CAAC,uBAAuB;oBACnC,UAAU;oBACV,OAAO,CAAC,GAAG,CAAC,WAAW;oBACvB,IAAI;oBACJ,kBAAkB;oBAClB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;QACjC,CAAC;QAED,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;YAC/B,OAAO,CAAC,OAAO;gBACb,MAAM;oBACN,0CAA0C;oBAC1C,OAAO,CAAC,GAAG,CAAC,iBAAiB;oBAC7B,UAAU;oBACV,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;QAC3B,CAAC;QAID,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;YAClB,OAAO,CAAC,IAAI,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,CAAC;QAC7C,CAAC;QAOD,IACE,OAAO,CAAC,GAAG,CAAC,QAAQ;YACpB,OAAO,CAAC,IAAI;YACZ,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,EACjC,CAAC;YACD,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACxE,CAAC;aAEI,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC;YACnE,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;gBACzB,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CACjC,qBAAqB,EACrB,0BAA0B,OAAO,CAAC,GAAG,CAAC,QAAQ,cAAc,CAC7D,CAAC;YACJ,CAAC;YAED,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC;gBAC/B,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CACjC,qBAAqB,EACrB,0BAA0B,OAAO,CAAC,GAAG,CAAC,cAAc,cAAc,CACnE,CAAC;YACJ,CAAC;YAED,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;gBAC7B,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,CACjC,qBAAqB,EACrB,0BAA0B,OAAO,CAAC,GAAG,CAAC,YAAY,cAAc,CACjE,CAAC;YACJ,CAAC;QACH,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;CAAA;AAED,SAAe,uBAAuB,CAAC,GAAW;;QAChD,IAAI,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC;YAC/B,MAAM,IAAI,KAAK,CACb,uFAAuF,CACxF,CAAC;QACJ,CAAC;IACH,CAAC;CAAA;AAED,SAAe,kBAAkB,CAC/B,GAAW,EACX,OAGC,EACD,MAAyB;;QAEzB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YACtB,OAAO;QACT,CAAC;QAED,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,sDAAsD,CAAC,CAAC;YACpE,OAAO;QACT,CAAC;QAKD,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;QAC/C,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;QAEhD,IAAI,CAAC;YACH,MAAM,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YACxC,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QACvC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,CAAC,IAAI,CAAC,oEAAoE,CAAC,CAAC;YAClF,MAAM,CAAC,KAAK,CAAC,mBAAmB,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;YAChD,OAAO;QACT,CAAC;IACH,CAAC;CAAA;AAED,SAAe,eAAe,CAC5B,GAAW,EACX,OAGC,EACD,MAAyB;;QAEzB,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YACnB,OAAO;QACT,CAAC;QAED,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAC1C,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CACT,0DAA0D,GAAG,OAAO,CAAC,KAAK,CAC3E,CAAC;YACF,OAAO;QACT,CAAC;QAED,IAAI,CAAC;YACH,MAAM,GAAG,CAAC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;YAC9C,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QACpC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,mCAAmC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;CAAA;AAED,SAAe,kBAAkB,CAC/B,GAAW,EACX,OAGC,EACD,MAAyB;;QAEzB,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YACtB,OAAO;QACT,CAAC;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QACjD,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;YAC5D,OAAO;QACT,CAAC;QAED,IAAI,CAAC;YACH,MAAM,GAAG,CAAC,SAAS,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;QACxC,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,IAAI,KAAK,CAAC,uCAAuC,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC;QACzE,CAAC;IACH,CAAC;CAAA;AAED,SAAe,iBAAiB,CAC9B,OAAgB,EAChB,GAAW,EACX,OAIC,EACD,MAAyB;;QAEzB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CACT,yCAAyC,GAAG,gCAAgC;gBAC5E,IAAI,CAAC,SAAS,CACZ;oBACE,GAAG;oBACH,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,iGAAiG;oBACvH,MAAM,EAAE,OAAO,CAAC,MAAM;oBACtB,OAAO,EAAE,OAAO,CAAC,OAAO;oBACxB,MAAM,EAAE,OAAO,CAAC,MAAM;oBACtB,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,aAAa,OAAO,CAAC,QAAQ,8BAA8B,CAAC,CAAC,CAAC,2DAA2D;oBAC9I,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,cAAc,OAAO,CAAC,KAAK,8BAA8B,CAAC,CAAC,CAAC,4DAA4D;oBAC/I,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,gDAAgD,CAAC,CAAC,CAAC,+CAA+C;oBAC/H,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,iCAAiC,CAAC,CAAC,CAAC,qCAAqC;oBACtG,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,kCAAkC,CAAC,CAAC,CAAC,sCAAsC;oBACxG,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,kCAAkC,OAAO,CAAC,KAAK,mBAAmB,CAAC,CAAC,CAAC,kCAAkC;oBAC9H,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,2EAA2E,CAAC,CAAC,CAAC,2EAA2E;iBAC7K,EACD,IAAI,EACJ,IAAI,CACL,CACF,CAAC;YACF,OAAO;QACT,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;QAIpD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE;gBACpC,IAAI,KAAK,EAAE,CAAC;oBACV,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;gBACvB,CAAC;gBAED,OAAO,CAAC,SAAS,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;AAED,SAAe,YAAY,CAAC,OAAO;;QACjC,MAAM,GAAG,GAAG,IAAI,aAAG,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QAChD,OAAO,MAAM,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAChD,CAAC;CAAA","sourcesContent":["import {logging} from '@angular-devkit/core';\r\nimport * as fse from 'fs-extra';\r\nimport * as path from 'path';\r\n\r\nimport {Schema} from '../deploy/schema';\r\nimport {GHPages} from '../interfaces';\r\nimport {defaults} from './defaults';\r\n\r\nimport Git from 'gh-pages/lib/git';\r\n\r\nexport async function run(\r\n  dir: string,\r\n  options: Schema & {\r\n    dotfiles: boolean,\r\n    notfound: boolean,\r\n    nojekyll: boolean\r\n  },\r\n  logger: logging.LoggerApi\r\n) {\r\n  options = await prepareOptions(options, logger);\r\n\r\n  // this has to occur _after_ the monkeypatch of util.debuglog:\r\n  const ghpages = require('gh-pages');\r\n\r\n  // always clean the cache directory.\r\n  // avoids \"Error: Remote url mismatch.\"\r\n  if (options.dryRun) {\r\n    logger.info('Dry-run / SKIPPED: cleaning of the cache directory');\r\n  } else {\r\n    ghpages.clean();\r\n  }\r\n\r\n  await checkIfDistFolderExists(dir);\r\n  await createNotFoundFile(dir, options, logger);\r\n  await createCnameFile(dir, options, logger);\r\n  await createNojekyllFile(dir, options, logger);\r\n  await publishViaGhPages(ghpages, dir, options, logger);\r\n\r\n  if (!options.dryRun) {\r\n    logger.info(\r\n      'ðŸŒŸ Successfully published via angular-cli-ghpages! Have a nice day!'\r\n    );\r\n  }\r\n}\r\n\r\nexport async function prepareOptions(\r\n  origOptions: Schema,\r\n  logger: logging.LoggerApi\r\n): Promise<Schema & {\r\n  dotfiles: boolean,\r\n  notfound: boolean,\r\n  nojekyll: boolean\r\n}> {\r\n  const options: Schema & {\r\n    dotfiles: boolean,\r\n    notfound: boolean,\r\n    nojekyll: boolean\r\n  } = {\r\n    ...defaults,\r\n    ...origOptions\r\n  };\r\n\r\n  // this is the place where the old `noSilent` was enabled\r\n  // (which is now always enabled because gh-pages is NOT silent)\r\n  // monkeypatch util.debuglog to get all the extra information\r\n  // see https://stackoverflow.com/a/39129886\r\n  const util = require('util');\r\n  let debuglog = util.debuglog;\r\n  util.debuglog = set => {\r\n    if (set === 'gh-pages') {\r\n      return function () {\r\n        let message = util.format.apply(util, arguments);\r\n        logger.info(message);\r\n      };\r\n    }\r\n    return debuglog(set);\r\n  };\r\n\r\n  // !! Important: Angular-CLI is NOT renaming the vars here !!\r\n  // so noDotfiles, noNotfound, and noNojekyll come in with no change\r\n  // we map this to dotfiles, notfound, nojekyll to have a consistent pattern\r\n  // between Commander and Angular-CLI\r\n  if (origOptions.noDotfiles) {\r\n    options.dotfiles = !origOptions.noDotfiles;\r\n  }\r\n  if (origOptions.noNotfound) {\r\n    options.notfound = !origOptions.noNotfound;\r\n  }\r\n  if (origOptions.noNojekyll) {\r\n    options.nojekyll = !origOptions.noNojekyll;\r\n  }\r\n\r\n  if (options.dryRun) {\r\n    logger.info('Dry-run: No changes are applied at all.');\r\n  }\r\n\r\n  if (options.name && options.email) {\r\n    options['user'] = {\r\n      name: options.name,\r\n      email: options.email\r\n    };\r\n  }\r\n\r\n  if (process.env.TRAVIS) {\r\n    options.message +=\r\n      ' -- ' +\r\n      process.env.TRAVIS_COMMIT_MESSAGE +\r\n      ' \\n\\n' +\r\n      'Triggered by commit: https://github.com/' +\r\n      process.env.TRAVIS_REPO_SLUG +\r\n      '/commit/' +\r\n      process.env.TRAVIS_COMMIT +\r\n      '\\n' +\r\n      'Travis CI build: https://travis-ci.org/' +\r\n      process.env.TRAVIS_REPO_SLUG +\r\n      '/builds/' +\r\n      process.env.TRAVIS_BUILD_ID;\r\n  }\r\n\r\n  if (process.env.CIRCLECI) {\r\n    options.message +=\r\n      '\\n\\n' +\r\n      'Triggered by commit: https://github.com/' +\r\n      process.env.CIRCLE_PROJECT_USERNAME +\r\n      '/' +\r\n      process.env.CIRCLE_PROJECT_REPONAME +\r\n      '/commit/' +\r\n      process.env.CIRCLE_SHA1 +\r\n      '\\n' +\r\n      'CircleCI build: ' +\r\n      process.env.CIRCLE_BUILD_URL;\r\n  }\r\n\r\n  if (process.env.GITHUB_ACTIONS) {\r\n    options.message +=\r\n      '\\n\\n' +\r\n      'Triggered by commit: https://github.com/' +\r\n      process.env.GITHUB_REPOSITORY +\r\n      '/commit/' +\r\n      process.env.GITHUB_SHA;\r\n  }\r\n\r\n  // NEW in 0.6.2: always discover remote URL (if not set)\r\n  // this allows us to inject tokens from environment even if `--repo` is not set manually\r\n  if (!options.repo) {\r\n    options.repo = await getRemoteUrl(options);\r\n  }\r\n\r\n  // for backwards compatibility only,\r\n  // in the past --repo=https://GH_TOKEN@github.com/<username>/<repositoryname>.git was advised\r\n  //\r\n  // this repalcement was also used to inject other tokens into the URL,\r\n  // so it should only be removed with the next major version\r\n  if (\r\n    process.env.GH_TOKEN &&\r\n    options.repo &&\r\n    options.repo.includes('GH_TOKEN')\r\n  ) {\r\n    options.repo = options.repo.replace('GH_TOKEN', process.env.GH_TOKEN);\r\n  }\r\n  // preffered way: token is replaced from plain URL\r\n  else if (options.repo && !options.repo.includes('x-access-token:')) {\r\n    if (process.env.GH_TOKEN) {\r\n      options.repo = options.repo.replace(\r\n        'https://github.com/',\r\n        `https://x-access-token:${process.env.GH_TOKEN}@github.com/`\r\n      );\r\n    }\r\n\r\n    if (process.env.PERSONAL_TOKEN) {\r\n      options.repo = options.repo.replace(\r\n        'https://github.com/',\r\n        `https://x-access-token:${process.env.PERSONAL_TOKEN}@github.com/`\r\n      );\r\n    }\r\n\r\n    if (process.env.GITHUB_TOKEN) {\r\n      options.repo = options.repo.replace(\r\n        'https://github.com/',\r\n        `https://x-access-token:${process.env.GITHUB_TOKEN}@github.com/`\r\n      );\r\n    }\r\n  }\r\n\r\n  return options;\r\n}\r\n\r\nasync function checkIfDistFolderExists(dir: string) {\r\n  if (await !fse.pathExists(dir)) {\r\n    throw new Error(\r\n      'Dist folder does not exist. Check the dir --dir parameter or build the project first!'\r\n    );\r\n  }\r\n}\r\n\r\nasync function createNotFoundFile(\r\n  dir: string,\r\n  options: {\r\n    notfound: boolean,\r\n    dryRun?: boolean\r\n  },\r\n  logger: logging.LoggerApi\r\n) {\r\n  if (!options.notfound) {\r\n    return;\r\n  }\r\n\r\n  if (options.dryRun) {\r\n    logger.info('Dry-run / SKIPPED: copying of index.html to 404.html');\r\n    return;\r\n  }\r\n\r\n  // Note:\r\n  // There is no guarantee that there will be an index.html file,\r\n  // as we may may specify a custom index file or a different folder is going to be deployed.\r\n  const indexHtml = path.join(dir, 'index.html');\r\n  const notFoundFile = path.join(dir, '404.html');\r\n\r\n  try {\r\n    await fse.copy(indexHtml, notFoundFile);\r\n    logger.info('404.html file created');\r\n  } catch (err) {\r\n    logger.info('index.html could not be copied to 404.html. Proceeding without it.');\r\n    logger.debug('Diagnostic info: ' + err.message);\r\n    return;\r\n  }\r\n}\r\n\r\nasync function createCnameFile(\r\n  dir: string,\r\n  options: {\r\n    cname?: string,\r\n    dryRun?: boolean\r\n  },\r\n  logger: logging.LoggerApi\r\n) {\r\n  if (!options.cname) {\r\n    return;\r\n  }\r\n\r\n  const cnameFile = path.join(dir, 'CNAME');\r\n  if (options.dryRun) {\r\n    logger.info(\r\n      'Dry-run / SKIPPED: creating of CNAME file with content: ' + options.cname\r\n    );\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await fse.writeFile(cnameFile, options.cname);\r\n    logger.info('CNAME file created');\r\n  } catch (err) {\r\n    throw new Error('CNAME file could not be created. ' + err.message);\r\n  }\r\n}\r\n\r\nasync function createNojekyllFile(\r\n  dir: string,\r\n  options: {\r\n    nojekyll: boolean,\r\n    dryRun?: boolean\r\n  },\r\n  logger: logging.LoggerApi\r\n) {\r\n  if (!options.nojekyll) {\r\n    return;\r\n  }\r\n\r\n  const nojekyllFile = path.join(dir, '.nojekyll');\r\n  if (options.dryRun) {\r\n    logger.info('Dry-run / SKIPPED: creating a .nojekyll file');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await fse.writeFile(nojekyllFile, '');\r\n    logger.info('.nojekyll file created');\r\n  } catch (err) {\r\n    throw new Error('.nojekyll file could not be created. ' + err.message);\r\n  }\r\n}\r\n\r\nasync function publishViaGhPages(\r\n  ghPages: GHPages,\r\n  dir: string,\r\n  options: Schema & {\r\n    dotfiles: boolean,\r\n    notfound: boolean,\r\n    nojekyll: boolean\r\n  },\r\n  logger: logging.LoggerApi\r\n) {\r\n  if (options.dryRun) {\r\n    logger.info(\r\n      `Dry-run / SKIPPED: publishing folder '${dir}' with the following options: ` +\r\n      JSON.stringify(\r\n        {\r\n          dir,\r\n          repo: options.repo || 'current working directory (which must be a git repo in this case) will be used to commit & push',\r\n          remote: options.remote,\r\n          message: options.message,\r\n          branch: options.branch,\r\n          name: options.name ? `the name '${options.username} will be used for the commit` : 'local or global git user name will be used for the commit',\r\n          email: options.email ? `the email '${options.cname} will be used for the commit` : 'local or global git user email will be used for the commit',\r\n          dotfiles: options.dotfiles ? `files starting with dot ('.') will be included` : `files starting with dot ('.') will be ignored`,\r\n          notfound: options.notfound ? 'a 404.html file will be created' : 'a 404.html file will NOT be created',\r\n          nojekyll: options.nojekyll ? 'a .nojekyll file will be created' : 'a .nojekyll file will NOT be created',\r\n          cname: options.cname ? `a CNAME file with the content '${options.cname}' will be created` : 'a CNAME file will NOT be created',\r\n          add: options.add ? 'all files will be added to the branch. Existing files will not be removed' : 'existing files will be removed from the branch before adding the new ones',\r\n        },\r\n        null,\r\n        '  '\r\n      )\r\n    );\r\n    return;\r\n  }\r\n\r\n  logger.info('ðŸš€ Uploading via git, please wait...');\r\n\r\n  // do NOT (!!) await ghPages.publish,\r\n  // the promise is implemented in such a way that it always succeeds â€“ even on errors!\r\n  return new Promise((resolve, reject) => {\r\n    ghPages.publish(dir, options, error => {\r\n      if (error) {\r\n        return reject(error);\r\n      }\r\n\r\n      resolve(undefined);\r\n    });\r\n  });\r\n}\r\n\r\nasync function getRemoteUrl(options) {\r\n  const git = new Git(process.cwd(), options.git);\r\n  return await git.getRemoteUrl(options.remote);\r\n}\r\n"]}